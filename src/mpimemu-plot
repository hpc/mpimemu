#!/usr/bin/env perl

#
# Copyright (c) 2010-2019 Triad National Security, LLC
#                         All rights reserved.
#
# This file is part of the mpimemu project. See the LICENSE file at the
# top-level directory of this distribution.
#

# Author: Samuel K. Gutierrez

use strict;
use warnings;

use Switch;
use Getopt::Long;
use Pod::Usage;
use Cwd;
use File::Basename;
use File::Spec::Functions;

my $SCRIPT_NAME = 'mpimemu-plot';
my $SCRIPT_VER = '0.4';

################################################################################
sub usage
{
    print
    "
Usage:
    $SCRIPT_NAME -i|-input /path/to/mpimemu/csvs [-o|-output /output/path]
Options:
    -i|-input   Specifies input directory of CSV data (Required).
    -o|-output  Specifies output directory for generated data (Default: cwd).
    -h|-help    Displays this message, then exits.
    -v|-version Displays version information, then exits.
About:
    $SCRIPT_NAME reads CSV data generated by mpimemu-mkstats and generates plots
    with gnuplot.
\n";
}

################################################################################
sub version
{
    print
    "$SCRIPT_NAME $SCRIPT_VER\n";
}

################################################################################
sub have_app
{
    my ($appname) = @_;

    my $app = undef;

    $app = `which $appname 2>/dev/null`;

    if (!$app) {
        return 0;
    }
    else {
        return 1;
    }
}

################################################################################
sub get_unused_filename
{
    my ($name, $ext) = @_;

    my $filepath = $name . $ext;
    my $index = 1;

    while (-e $filepath) {
        $filepath = $name . "-$index" . $ext;
        $index++;
    }

    return $filepath;
}

################################################################################
sub plot_node
{
    my ($in_dir, $out_dir, $file) = @_;

    # remove '.csv'
    my $gpname = substr($file, 0, -4);
    $gpname = get_unused_filename(catfile($out_dir, $gpname), '.pdf');
    my $ffile = catfile($in_dir, $file);

    my $gpstr = <<__GPSTR__;
set terminal postscript enhanced color
set output '| ps2pdf - $gpname'

set title "Average Node Memory Usage"
set xlabel "Number of MPI Tasks"
set ylabel "Memory Usage (kB)"

plot \\
'$ffile' using 1:2 with linespoints title 'Pre Init Ave. MemUsed', \\
'$ffile' using 1:3 with linespoints title 'Pre Init Ave. Cached', \\
'$ffile' using 1:4 with linespoints title 'Pre Init Ave. Active', \\
'$ffile' using 1:5 with linespoints title 'Pre Init Ave. Inactive', \\
'$ffile' using 1:6 with linespoints title 'Pre Init Ave. Buffers', \\
'$ffile' using 1:8 with linespoints title 'Ave. MemUsed', \\
'$ffile' using 1:9 with linespoints title 'Ave. Cached', \\
'$ffile' using 1:10 with linespoints title 'Ave. Active', \\
'$ffile' using 1:11 with linespoints title 'Ave. Inactive', \\
'$ffile' using 1:12 with linespoints title 'Ave. Buffers', \\
'$ffile' using 1:(column(8) - column(2)) with linespoints title \\
'Approx. MPI Memory Usage'
__GPSTR__

    open(GP, '|-', 'gnuplot') or die "cannot open pipe to gnuplot: $!";
    print GP $gpstr;
    close(GP) or die "$!";
}

################################################################################
sub plot_proc
{
    my ($in_dir, $out_dir, $file) = @_;
    # remove '.csv'
    my $gpname = substr($file, 0, -4);
    $gpname = get_unused_filename(catfile($out_dir, $gpname), '.pdf');
    my $ffile = catfile($in_dir, $file);

    my $gpstr = <<__GPSTR__;
set terminal postscript enhanced color
set output '| ps2pdf - $gpname'

set title "Average Process MemoryÂ Usage"
set xlabel "Number of PEs"
set ylabel "Memory Usage (kB)"

plot \\
'$ffile' using 1:6  with lines title 'Pre Init VmRSS', \\
'$ffile' using 1:16 with lines title 'VmRSS'
__GPSTR__

    open(GP, '|-', 'gnuplot') or die "cannot open pipe to gnuplot: $!";
    print GP $gpstr;
    close(GP) or die "$!";
}

################################################################################
sub plot_if_valid
{
    my ($in_dir, $out_dir, $file) = @_;

    open(FILE, "<", catfile($in_dir, $file)) or die "can't open $file: $!";
    my @fcont = <FILE>;
    my @ftype = grep(/# TYPE: \w+$/, @fcont);

    if (scalar @ftype != 1) {
        print STDERR "  - skipping $file -- cannot determine TYPE.\n";
        close(FILE) or die "can't close $file:$!";
        return;
    }
    # we found a type
    else {
        # get the type
        @ftype = $ftype[0] =~ m/# TYPE: (\w+)$/g;
        print "  + $file\n";
    }
    switch ($ftype[0]) {
        case ['node'] {
            plot_node($in_dir, $out_dir, $file);
        }
        case ['proc'] {
            plot_proc($in_dir, $out_dir, $file);
        }
        else {
            print STDERR "  . skipping $file -- unknown TYPE.\n";
            close(FILE) or die "can't close $file:$!";
        }
    }

    close(FILE) or die "can't close $file:$!";
}

################################################################################
sub main
{
    my $in_dir = undef;
    my $out_dir = undef;
    my $help = 0;
    my $ver = 0;

    ### parse options ###
    GetOptions(
        "help|?" => \$help,
        "version" => \$ver,
        "input=s" => \$in_dir,
        "output=s" => \$out_dir
    );
    if ($help) {
        usage();
        exit(0);
    }
    if ($ver) {
        version();
        exit(0);
    }
    if (not defined $in_dir) {
        usage();
        exit(1);
    }
    # set default output to cwd if one isn't provided
    if (not defined $out_dir) {
        $out_dir = getcwd;
    }
    ### done handling options ###

    if (!have_app('gnuplot')) {
        die "gnuplot not found in PATH. Cannot continue\n";
    }
    if (!have_app('ps2pdf')) {
        die "ps2pdf not found in PATH. Cannot continue\n";
    }

    opendir(DIR, $in_dir) or die "can't open $in_dir: $!";
    # only care about file names that are *.csv
    my @csv_files = grep(/\.csv$/, readdir(DIR));
    # if we don't have any data, then bail.
    if (not @csv_files) {
        closedir(DIR);
        die "Cannot find data files in: $in_dir -- Terminating.\n";
    }
    closedir(DIR);

    print "- Generating Plots...\n";

    foreach my $file (@csv_files) {
        plot_if_valid($in_dir, $out_dir, $file);
    }

    print "- Done Generating PDF(s)...\n";
    print "- Plot(s) written to: $out_dir\n";

    return 0;
}

exit(main());
