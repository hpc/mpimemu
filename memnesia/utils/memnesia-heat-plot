#!/usr/bin/env python

###############################################################################
# Copyright (c)      2017 Los Alamos National Security, LLC.
#                         All rights reserved.
###############################################################################

import os
import sys
import matplotlib as mp
import matplotlib.pyplot as plt
from matplotlib.colors import PowerNorm
import numpy as np


###############################################################################
class Util:

    @staticmethod
    def btomb(b):
        return float(b) / 1024.0 / 1024.0


###############################################################################
class HeatMatrix:
    def __init__(self, input_matrix):
        self.input_matrix = input_matrix
        self.numpe = 0
        self.data = None
        self.min = sys.float_info.max
        self.max = sys.float_info.min

        with open(self.input_matrix, 'r') as f:
            content = [x.rstrip() for x in f.readlines()]
            for i, l in enumerate(content):
                if (i == 0):
                    self.numpe = np.long(l.split(' ')[0])
                    self.data = np.zeros((self.numpe, self.numpe),
                                         dtype=np.double)
                    continue
                row = [Util.btomb(float(x)) for x in l.split(' ')]
                self.min = min(self.min, min(row))
                self.max = max(self.max, max(row))
                self.data[i - 1] = np.array(row)


###############################################################################
class Plotter:

    def __init__(self, heat_mat):
        self.axis_font_size = 14
        self.heat_mat = heat_mat
        self.fig, self.ax = plt.subplots()

    def plot(self):

        cnorm = PowerNorm(gamma=1./4.)
        plt.imshow(
            self.heat_mat.data,
            origin='lower',
            interpolation='none',
            cmap='inferno',
            norm=cnorm
        )
        cbar = plt.colorbar(
            label='Point-to-Point Data Transmission (MB)'
        )
        cax = cbar.ax
        text = cax.yaxis.label
        font = mp.font_manager.FontProperties(size=self.axis_font_size)
        text.set_font_properties(font)

        self.ax.set_xlabel(
            'Global Process Identifier (Receiver)', fontsize=self.axis_font_size
        )
        self.ax.set_ylabel(
            'Global Process Identifier (Sender)', fontsize=self.axis_font_size
        )

        self.fig.savefig(
            'heat.pdf',
            format='pdf',
            bbox_inches='tight',
            pad_inches=0.03
        )


###############################################################################
def usage():
    print('usage: memnesia-heat-plot loba-comm-matrix.out')


###############################################################################
def check_args(argv):
    if len(argv) != 2:
        usage()
        exit(os.EX_USAGE)

    if not os.path.isfile(argv[1]):
        print("'{}' is not a file. Cannot continue.".format(argv[1]))
        usage()
        exit(os.EX_USAGE)


###############################################################################
def main(argv=None):
    if argv is None:
        argv = sys.argv

    check_args(argv)

    plotter = Plotter(HeatMatrix(argv[1]))
    plotter.plot()

    return os.EX_OK


###############################################################################
###############################################################################
###############################################################################
if __name__ == "__main__":
    sys.exit(main())
